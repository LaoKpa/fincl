{"version":3,"sources":["Intro.js","Reports.js","FeatureImportance.js","App.js","serviceWorker.js","index.js","schema.js"],"names":["Intro","target","rel","href","ProgressBar","now","label","striped","bsStyle","key","className","React","Component","QUESTIONS","schema","questionSets","questions","QUESTIONS_MAPPED","_","fromPairs","map","val","questionId","CLASSIFIER_OPTIONS","classifier","input","options","value","text","getSignalsPlotData","signals","isEmpty","symbols","filter","keys","data","x_rows","y_rows","s","forEach","row","push","symbol","v","replace","x","y","type","name","SYMBOLS_JSON","Bloomberg","ConfusionMatrixTable","this","props","rep","confusion_matrix","c_rep","classification_report","has","k1","k2","split","l1","l2","Table","bordered","condensed","hover","ClassificationReportTable","precision","toFixed","recall","support","accuracy","ClassificationReportScoresTable","isNull","roc_auc_score","f1_score","SimpleTable","MultiTable","cols","indices","PERC_COLS","DATE_COLS","col","includes","format_num","MultiTableSymbols","startCase","HidablePanel","context","state","open","defaultOpen","Panel","title","expanded","onToggle","Heading","Title","onClick","setState","Glyphicon","style","float","glyph","Collapse","children","PnLReport","url","process","fig_file_name","p_stats","dd_table","PERC_STATS","k","Row","Col","md","alt","src","width","padding","ClassificationReportExplanation","get","classifier_str","ClassificationReportData","hyper_params","omit","n","ClassificationReport","form_data","pnl","signal","layout","height","getFIPlotData","imps","orientation","error_x","visible","array","FeatureImportance","renderPlot","length","featImp","mean","std","sortBy","imp_groups","toPairs","groupBy","it","makePayloadStringObj","p","forecast_horizon","Form","disableSubmit","onUpdate","onSubmit","Loader","override","css","size","color","loading","parseBackendData","primary","Papa","parse","header","dynamicTyping","secondary","Reports","position","Tabs","defaultActiveKey","id","Tab","eventKey","feature_importance","INIT_STATE","reports","App","str","that","axios","then","response","Grid","margin","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"sTAsNeA,E,iLAjNX,OACE,6BACE,4CAEA,4CAAiB,uBAAGC,OAAO,SAASC,IAAI,sBAAsBC,KAAK,mFAAlD,0CAAjB,8HAA0T,uCAA1T,2IAAod,uBAAGF,OAAO,SAASC,IAAI,sBAAsBC,KAAK,oCAAlD,UAApd,KAEA,iNAAsL,uBAAGF,OAAO,SAASC,IAAI,sBAAsBC,KAAK,kDAAlD,qBAAtL,wKACA,wMACA,iFAAsD,sDAAtD,qDAA2I,iDAA3I,uTAED,wCACA,4BACC,yNACA,kOACA,uPACA,2IACA,mLACA,qLACA,uIAGA,uCACA,wDAA6B,uCAA7B,4IACA,2GACA,2IACA,qDACA,sIAGA,kBAACC,EAAA,EAAD,CAAaC,IAAK,IAAKC,MAAO,gBAC9B,6CACA,+bAGA,kBAACF,EAAA,EAAD,CAAaG,SAAO,EAACF,IAAK,IAAKC,MAAO,uBACtC,2CACA,oNAC0L,8BAAO,GADjM,yBAGA,kBAACF,EAAA,EAAD,CAAaG,SAAO,EAACF,IAAK,IAAKC,MAAO,qEACtC,sDACA,gMAGA,kBAACF,EAAA,EAAD,CAAaC,IAAK,IAAKC,MAAO,sCAC9B,6CACA,2BACE,8BAAO,uBADT,mEACsG,8BAAO,UAD7G,YAGA,kBAACF,EAAA,EAAD,CAAaC,IAAK,IAAKC,MAAO,8CAC9B,mDACA,kLAIA,kBAACF,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CAAaI,QAAQ,UAAUH,IAAK,GAAII,IAAK,EAAGH,MAAO,cACvD,kBAACF,EAAA,EAAD,CAAaI,QAAQ,SAASH,IAAK,GAAII,IAAK,EAAGH,MAAO,cAExD,sDACA,qOAGA,4UAIA,kBAACF,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CAAaI,QAAQ,UAAUH,IAAK,GAAII,IAAK,EAAGH,MAAO,cACvD,kBAACF,EAAA,EAAD,CAAaI,QAAQ,OAAOH,IAAK,GAAII,IAAK,EAAGH,MAAO,cAEtD,kBAACF,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CAAaI,QAAQ,UAAUH,IAAK,GAAII,IAAK,EAAGH,MAAO,cACvD,kBAACF,EAAA,EAAD,CAAaI,QAAQ,OAAOH,IAAK,GAAII,IAAK,EAAGH,MAAO,aACpD,kBAACF,EAAA,EAAD,CAAaI,QAAQ,UAAUH,IAAK,GAAII,IAAK,EAAGH,MAAO,eAEzD,kBAACF,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CAAaI,QAAQ,UAAUH,IAAK,GAAII,IAAK,EAAGH,MAAO,cACvD,kBAACF,EAAA,EAAD,CAAaI,QAAQ,OAAOH,IAAK,GAAII,IAAK,EAAGH,MAAO,aACpD,kBAACF,EAAA,EAAD,CAAaI,QAAQ,UAAUH,IAAK,GAAII,IAAK,EAAGH,MAAO,eAEzD,kBAACF,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CAAaI,QAAQ,UAAUH,IAAK,GAAII,IAAK,EAAGH,MAAO,cACvD,kBAACF,EAAA,EAAD,CAAaI,QAAQ,OAAOH,IAAK,GAAII,IAAK,EAAGH,MAAO,aACpD,kBAACF,EAAA,EAAD,CAAaI,QAAQ,UAAUH,IAAK,GAAII,IAAK,EAAGH,MAAO,eAEzD,kBAACF,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CAAaI,QAAQ,OAAOH,IAAK,GAAII,IAAK,EAAGH,MAAO,aACpD,kBAACF,EAAA,EAAD,CAAaI,QAAQ,UAAUH,IAAK,GAAII,IAAK,EAAGH,MAAO,eAEzD,2DACA,+KAIA,kBAACF,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CAAaI,QAAQ,UAAUH,IAAK,GAAII,IAAK,EAAGH,MAAO,2CACvD,kBAACF,EAAA,EAAD,CAAaI,QAAQ,SAASH,IAAK,GAAII,IAAK,EAAGH,MAAO,2CAExD,wCACA,mTAIA,2CACA,8JAGA,sGAGA,kBAACF,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CAAaI,QAAQ,UAAUH,IAAK,GAAII,IAAK,EAAGH,MAAO,cACvD,kBAACF,EAAA,EAAD,CAAaI,QAAQ,UAAUH,IAAK,EAAGI,IAAK,IAC5C,kBAACL,EAAA,EAAD,CAAaI,QAAQ,SAASH,IAAK,GAAII,IAAK,EAAGH,MAAO,cAExD,kBAACF,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CAAaI,QAAQ,UAAUH,IAAK,GAAII,IAAK,EAAGH,MAAO,cACvD,kBAACF,EAAA,EAAD,CAAaI,QAAQ,UAAUH,IAAK,EAAGI,IAAK,IAC5C,kBAACL,EAAA,EAAD,CAAaI,QAAQ,SAASH,IAAK,GAAII,IAAK,EAAGH,MAAO,cAExD,kBAACF,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CAAaI,QAAQ,UAAUH,IAAK,GAAII,IAAK,EAAGH,MAAO,cACvD,kBAACF,EAAA,EAAD,CAAaI,QAAQ,UAAUH,IAAK,EAAGI,IAAK,IAC5C,kBAACL,EAAA,EAAD,CAAaI,QAAQ,SAASH,IAAK,GAAII,IAAK,EAAGH,MAAO,cAExD,kBAACF,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CAAaI,QAAQ,UAAUH,IAAK,GAAII,IAAK,EAAGH,MAAO,cACvD,kBAACF,EAAA,EAAD,CAAaI,QAAQ,UAAUH,IAAK,EAAGI,IAAK,IAC5C,kBAACL,EAAA,EAAD,CAAaI,QAAQ,SAASH,IAAK,GAAII,IAAK,EAAGH,MAAO,cAExD,8CACA,2KAC+I,uBAAGL,OAAO,SAASC,IAAI,sBAAsBC,KAAK,0FAAlD,kCAD/I,gDAE6C,yCAF7C,yGAIA,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CAAaM,UAAU,oBAAoBL,IAAK,GAAII,IAAK,EAAGH,MAAO,KACnE,kBAACF,EAAA,EAAD,CAAaI,QAAQ,SAASH,IAAK,GAAII,IAAK,EAAGH,MAAO,4BAGxD,0CACA,4BACE,yFACA,+HAAoG,0CACpG,uDACA,oFACA,uEACA,4EACA,2FACA,2IAIF,qDAEA,4BACE,oGACA,qEACA,4BAAI,6DACF,4BACE,yHACA,qFACA,2FACA,sFACA,yKACA,qGACA,gGACA,+EAGJ,0DAA+B,uBAAGL,OAAO,SAASC,IAAI,sBAAsBC,KAAK,wCAAlD,QAA/B,KACA,2FAAgE,uBAAGF,OAAO,SAASC,IAAI,sBAAsBC,KAAK,wFAAlD,oBAAhE,KACA,wGACA,yFAA8D,uBAAGF,OAAO,SAASC,IAAI,sBAAsBC,KAAK,oFAAlD,qBAA9D,wJACA,4BAAI,uBAAGF,OAAO,SAASC,IAAI,sBAAsBC,KAAK,0FAAlD,QAAJ,2GACA,8HACA,iGACA,qFACA,0IACA,+EAAoD,uBAAGF,OAAO,SAASC,IAAI,sBAAsBC,KAAK,0GAAlD,yBAApD,KACA,sIACA,2CAAgB,mCAAhB,iFACA,mCAAQ,uBAAGF,OAAO,SAASC,IAAI,sBAAsBC,KAAK,oHAAlD,wBAAR,8KACA,iJACA,qHACA,+IACA,uCAAY,uBAAGF,OAAO,SAASC,IAAI,sBAAsBC,KAAK,6CAAlD,WAAZ,uCAAyJ,uBAAGF,OAAO,SAASC,IAAI,sBAAsBC,KAAK,oCAAlD,QAAzJ,yCACA,8GAGD,oDACD,4BACE,qEAA0C,uBAAGF,OAAO,SAASC,IAAI,sBAAsBC,KAAK,mFAAlD,0CAA1C,4IACA,gEAAqC,uBAAGF,OAAO,SAASC,IAAI,sBAAsBC,KAAK,0FAAlD,eAArC,sIAAkU,yCAAlU,YACA,iEAA0C,uBAAGF,OAAO,SAASC,IAAI,sBAAsBC,KAAK,kDAAlD,YAA1C,oGACA,8DAAmC,uBAAGF,OAAO,SAASC,IAAI,sBAAsBC,KAAK,4CAAlD,gBAAnC,0CACA,uVAEkI,uCAFlI,iN,GAvMUQ,IAAMC,W,8ECOpBC,EAAYC,IAAOC,aAAa,GAAGC,UAEnCC,EAAmBC,IAAEC,UAAUD,IAAEE,IAAIP,GAAW,SAACQ,GAAD,MAAS,CAACA,EAAIC,WAAYD,OAC1EE,EAAqBL,IAAEC,UAAUD,IAAEE,IAAIH,EAAiBO,WAAWC,MAAMC,SAAS,SAACL,GAAD,MAAS,CAACA,EAAIM,MAAON,EAAIO,UAI3GC,EAAqB,SAACC,GAC1B,GAAIZ,IAAEa,QAAQD,GACZ,MAAO,GAET,IAAME,EAAUd,IAAEe,OAAOf,IAAEgB,KAAKJ,EAAQK,KAAK,KACvCC,EAAS,GACTC,EAASnB,IAAEC,UAAUD,IAAEE,IAAIY,GAAS,SAACM,GAAD,MAAO,CAACA,EAAG,QAqBrD,OAlBApB,IAAEqB,QAAQT,EAAQK,MAAM,SAACK,GACvBJ,EAAOK,KAAKD,EAAI,KAChBtB,IAAEqB,QAAQP,GAAS,SAACU,GAClBL,EAAOK,GAAQD,KAAKD,EAAIE,UAIbxB,IAAEE,IAAIY,GAAS,SAACU,GAC7B,IAAMC,EAAIzB,IAAE0B,QAAQF,EAAQ,KAAM,IAElC,MAAO,CACLG,EAAGT,EACHU,EAAGT,EAAOK,GACVK,KAAM,UACNC,KAAMC,EAAaC,UAAUP,IAAMA,OAOnCQ,E,iLAEF,GAAIjC,IAAEa,QAAQqB,KAAKC,MAAMlB,MACvB,OAAO,KAET,IAAMmB,EAAMF,KAAKC,MAAMlB,KAAKoB,iBACtBC,EAAQJ,KAAKC,MAAMlB,KAAKsB,sBALtB,EAMSvC,IAAEwC,IAAIF,EAAO,OAAS,CAAC,MAAO,OAAS,CAAC,OAAQ,OANzD,mBAMDG,EANC,KAMGC,EANH,OAOS,CAAC1C,IAAE2C,MAAMF,EAAI,KAAK,GAAIzC,IAAE2C,MAAMD,EAAI,KAAK,IAAjDE,EAPC,KAOGC,EAPH,KAQR,OACE,kBAACC,EAAA,EAAD,CAAOzD,SAAO,EAAC0D,UAAQ,EAACC,WAAS,EAACC,OAAK,GACrC,+BACE,4BACE,6BACA,yCAAeL,GACf,yCAAeC,KAGnB,+BACE,4BACE,qCAAWD,GACX,4BAAKR,EAAI,GAAG,IACZ,4BAAKA,EAAI,GAAG,KAEd,4BACE,qCAAWS,GACX,4BAAKT,EAAI,GAAG,IACZ,4BAAKA,EAAI,GAAG,W,GA3BW3C,IAAMC,WAmCnCwD,E,iLAEF,GAAIlD,IAAEa,QAAQqB,KAAKC,MAAMlB,MACvB,OAAO,KAET,IAAMmB,EAAMF,KAAKC,MAAMlB,KAJf,EAKSjB,IAAEwC,IAAIJ,EAAK,OAAS,CAAC,MAAO,OAAS,CAAC,OAAQ,OALvD,mBAKDK,EALC,KAKGC,EALH,OAMS,CAAC1C,IAAE2C,MAAMF,EAAI,KAAK,GAAIzC,IAAE2C,MAAMD,EAAI,KAAK,IAAjDE,EANC,KAMGC,EANH,KAOR,OACE,kBAACC,EAAA,EAAD,CAAOzD,SAAO,EAAC0D,UAAQ,EAACC,WAAS,EAACC,OAAK,GACrC,+BACE,4BACE,6BACA,yCACA,sCACA,wCACA,yCAGJ,+BACE,4BACE,4BAAKL,GACL,4BAAKR,EAAIK,GAAIU,UAAUC,QAAQ,IAC/B,4BAAKhB,EAAIK,GAAIY,OAAOD,QAAQ,IAC5B,4BAAKhB,EAAIK,GAAI,YAAYW,QAAQ,IACjC,4BAAKhB,EAAIK,GAAIa,UAEf,4BACE,4BAAKT,GACL,4BAAKT,EAAIM,GAAIS,UAAUC,QAAQ,IAC/B,4BAAKhB,EAAIM,GAAIW,OAAOD,QAAQ,IAC5B,4BAAKhB,EAAIM,GAAI,YAAYU,QAAQ,IACjC,4BAAKhB,EAAIM,GAAIY,UAEf,4BACE,6BACA,6BACA,6BACA,6BACA,8BAEF,4BACE,wCACA,6BACA,6BACA,4BAAKlB,EAAImB,SAASH,QAAQ,IAC1B,4BAAKhB,EAAI,aAAakB,UAExB,4BACE,0CACA,4BAAKlB,EAAI,aAAae,UAAUC,QAAQ,IACxC,4BAAKhB,EAAI,aAAaiB,OAAOD,QAAQ,IACrC,4BAAKhB,EAAI,aAAa,YAAYgB,QAAQ,IAC1C,4BAAKhB,EAAI,aAAakB,UAExB,4BACE,6CACA,4BAAKlB,EAAI,gBAAgBe,UAAUC,QAAQ,IAC3C,4BAAKhB,EAAI,gBAAgBiB,OAAOD,QAAQ,IACxC,4BAAKhB,EAAI,gBAAgB,YAAYgB,QAAQ,IAC7C,4BAAKhB,EAAI,gBAAgBkB,gB,GA5DG7D,IAAMC,WAoExC8D,E,iLAEF,OACE,kBAACV,EAAA,EAAD,CAAOzD,SAAO,EAAC0D,UAAQ,EAACC,WAAS,EAACC,OAAK,GACrC,+BACE,4BACIjD,IAAEyD,OAAOvB,KAAKC,MAAMuB,eAA+D,KAA9C,wBAAIlE,UAAU,YAAd,iBACrCQ,IAAEyD,OAAOvB,KAAKC,MAAMuB,eAAuF,KAAtE,wBAAIlE,UAAU,YAAY0C,KAAKC,MAAMuB,cAAcN,QAAQ,KAEpG,4BACIpD,IAAEyD,OAAOvB,KAAKC,MAAMwB,UAAqD,KAAzC,wBAAInE,UAAU,YAAd,YAChCQ,IAAEyD,OAAOvB,KAAKC,MAAMwB,UAA6E,KAAjE,wBAAInE,UAAU,YAAY0C,KAAKC,MAAMwB,SAASP,QAAQ,W,GAXtD3D,IAAMC,WAmB9CkE,E,iLAEF,OACE,kBAACd,EAAA,EAAD,CAAOzD,SAAO,EAAC0D,UAAQ,EAACC,WAAS,EAACC,OAAK,GACrC,+BACGjD,IAAEE,IAAIgC,KAAKC,MAAMlB,MAAM,SAACR,EAAOlB,GAC9B,OACE,wBAAIA,IAAKA,GACP,wBAAIC,UAAU,YAAYD,GAC1B,wBAAIC,UAAU,YAAYiB,a,GAThBhB,IAAMC,WAmB1BmE,E,iLAEF,IAAM5C,EAAOiB,KAAKC,MAAMlB,KAClB6C,EAAO9D,IAAEgB,KAAKC,GACd8C,EAAU/D,IAAEgB,KAAKC,EAAK6C,EAAK,KAE7BE,EAAY,CAAC,qBACbC,EAAY,CAAC,YAAa,cAAe,iBAQ7C,OACE,kBAACnB,EAAA,EAAD,CAAOzD,SAAO,EAAC0D,UAAQ,EAACC,WAAS,EAACC,OAAK,GACrC,+BACE,4BACGjD,IAAEE,IAAI4D,GAAM,SAACrD,EAAOlB,GAAR,OAAgB,wBAAIA,IAAKA,GAAMkB,QAGhD,+BACGT,IAAEE,IAAI6D,GAAS,SAACzC,GACf,OACE,wBAAI/B,IAAK+B,GACNtB,IAAEE,IAAI4D,GAAM,SAACI,GAAD,OAAS,wBAAI3E,IAAK2E,GAlBxB,SAACzC,EAAGyC,GACrB,OAAIlE,IAAEmE,SAAS1C,EAAG,cAAsB,MACpCzB,IAAEmE,SAASF,EAAWC,GAAalE,IAAE2C,MAAMlB,EAAG,KAAK,GACnDzB,IAAEmE,SAASH,EAAWE,GAAazC,EAAE2B,QAAQ,GAAK,IAC/C3B,EAcwC2C,CAAWnD,EAAKiD,GAAK5C,GAAM4C,iB,GA1BvDzE,IAAMC,WAqCzB2E,E,iLAEF,IAAMpD,EAAOiB,KAAKC,MAAMlB,KAClB6C,EAAO9D,IAAEgB,KAAKC,GACd8C,EAAU/D,IAAEgB,KAAKC,EAAK6C,EAAK,KAEjC,OACE,kBAAChB,EAAA,EAAD,CAAOzD,SAAO,EAAC0D,UAAQ,EAACC,WAAS,EAACC,OAAK,GACrC,+BACE,4BACGjD,IAAEE,IAAI4D,GAAM,SAACrD,EAAOlB,GAAR,OAAgB,wBAAIA,IAAKA,GAAMS,IAAEsE,UAAU7D,SAG5D,+BACGT,IAAEE,IAAI6D,GAAS,SAACzC,GACf,OACE,wBAAI/B,IAAK+B,GACNtB,IAAEE,IAAI4D,GAAM,SAACI,GAAD,OAAS,wBAAI3E,IAAK2E,GAAMjD,EAAKiD,GAAK5C,iB,GAjB/B7B,IAAMC,WA2BhC6E,E,YACJ,WAAYpC,EAAOqC,GAAU,IAAD,8BAC1B,4CAAMrC,EAAOqC,KAERC,MAAQ,CACXC,OAAQvC,EAAMwC,aAJU,E,sEAQjB,IAAD,OACR,OACE,kBAACC,EAAA,EAAD,CAAOrF,IAAK2C,KAAKC,MAAM0C,MAAOC,SAAU5C,KAAKuC,MAAMC,KAAMK,SAAU,cACjE,kBAACH,EAAA,EAAMI,QAAP,KACE,kBAACJ,EAAA,EAAMK,MAAP,CAAazF,UAAU,eAAe0F,QAAS,kBAAM,EAAKC,SAAS,CAAET,MAAO,EAAKD,MAAMC,SACrF,4BAAKxC,KAAKC,MAAM0C,MAAhB,IAAuB,kBAACO,EAAA,EAAD,CAAWC,MAAO,CAACC,MAAO,SAAUC,MAAK,kBAAarD,KAAKuC,MAAMC,KAAO,KAAO,aAG1G,kBAACE,EAAA,EAAMY,SAAP,KACGtD,KAAKC,MAAMsD,e,GAlBKhG,IAAMC,WA0B3BgG,E,iLAEF,GAAI1F,IAAEa,QAAQqB,KAAKC,MAAMlB,MACvB,OAAO,KAGT,IAAM0E,EAAMC,mBAAwC1D,KAAKC,MAAMlB,KAAK4E,cAL5D,EAMoB3D,KAAKC,MAAMlB,KAAjC6E,EANE,EAMFA,QAASC,EANP,EAMOA,SACXC,EAAa,CAAC,gBAAiB,qBAAsB,oBAAqB,eAAgB,uBACxF5B,EAAa,SAAC6B,EAAGxE,GACrB,OAAKA,EACEzB,IAAEmE,SAAS6B,EAAYC,IAAU,IAAJxE,GAAS2B,QAAQ,GAAK,IAAM3B,EAAE2B,QAAQ,GAD3D,IAOjB,OAJA0C,EAAU9F,IAAEC,UAAUD,IAAEE,IACtB4F,GAAS,SAACrE,EAAEwE,GAAH,MAAU,CAACA,EAAG7B,EAAW6B,EAAGxE,QAIrC,yBAAKjC,UAAU,cACb,kBAAC0G,EAAA,EAAD,CAAK3G,IAAI,UACP,kBAAC4G,EAAA,EAAD,CAAKC,GAAI,IACP,kBAAC,EAAD,CAAcvB,MAAM,oBAAoBF,aAAW,GACjD,kBAACuB,EAAA,EAAD,CAAK3G,IAAI,UACP,kBAAC4G,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC,EAAD,CAAanF,KAAM6E,MAGvB,yCACA,kBAAC,EAAD,CAAY7E,KAAM8E,IAClB,qHAIN,kBAACG,EAAA,EAAD,CAAK3G,IAAI,WACP,kBAAC4G,EAAA,EAAD,CAAKC,GAAI,IACP,kBAAC,EAAD,CAAcvB,MAAM,iBAClB,kBAAC,EAAD,CAAmB5D,KAAMc,OAI/B,kBAACmE,EAAA,EAAD,CAAK3G,IAAI,aACP,kBAAC4G,EAAA,EAAD,CAAKC,GAAI,IACP,kBAAC,EAAD,CAAcvB,MAAM,YAAYF,aAAW,GACzC,yBAAK0B,IAAI,YAAYC,IAAKX,EAAKY,MAAM,OAAOlB,MAAO,CAACmB,QAAS,kB,GA3CnD/G,IAAMC,WAoDxB+G,E,iLAEF,GAAIzG,IAAEa,QAAQqB,KAAKC,MAAMlB,MACvB,OAAO,KAET,IAAIX,EAAaN,IAAE0G,IAAIxE,KAAKC,MAAO,kBAAmB,iBAElDwE,EAAiBtG,EAAmBC,GACxC,OAAO,4FAAiE,gCAASqG,GAA1E,6CAA4I,8BAAO,uBAAnJ,wBACY,8BAAO,8BADnB,0H,GARmClH,IAAMC,WAa9CkH,E,iLAEF,GAAI5G,IAAEa,QAAQqB,KAAKC,MAAMlB,MACvB,OAAO,KAET,IAAI4F,EAAe7G,IAAE8G,KAAK5E,KAAKC,MAAMlB,KAAK4F,aAAc,CAAC,WAGzD,OAFAA,EAAe7G,IAAEC,UAAUD,IAAEE,IAAI2G,GAAc,SAACpG,EAAOlB,GAAR,MAAgB,CAACA,GA9UrDwH,EA8UgEtG,EA9U1DsG,EAAI,IAAM,EA8UyDtG,EAAQA,EAAM2C,QAAQ,KA9UhG,IAAC2D,MAiVT,6BACE,kBAAC,EAAD,CAA2B9F,KAAMiB,KAAKC,MAAMlB,KAAKsB,wBACjD,iDACA,kBAAC,EAAD,CAAsBtB,KAAMiB,KAAKC,MAAMlB,OACvC,kBAACiF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,uCACA,kBAAC,EAAD,CAAiC1C,cAAexB,KAAKC,MAAMlB,KAAKyC,cAAeC,SAAUzB,KAAKC,MAAMlB,KAAK0C,YAE3G,kBAACwC,EAAA,EAAD,CAAKC,GAAI,GACP,iDACA,kBAAC,EAAD,CAAanF,KAAM4F,W,GApBQpH,IAAMC,WA4BvCsH,E,iLAEF,OAAIhH,IAAEa,QAAQqB,KAAKC,MAAMlB,MAChB,KAGL,kBAACiF,EAAA,EAAD,CAAK3G,IAAI,UACP,kBAAC4G,EAAA,EAAD,CAAKC,GAAI,IACP,kBAAC,EAAD,CAAcvB,MAAM,wBAAwBF,aAAW,GACtD,kBAAC,EAAD,CAAiC1D,KAAMiB,KAAKC,MAAM8E,YAClD,kBAAC,EAAD,CAA0BhG,KAAMiB,KAAKC,MAAMlB,QAE5C,kBAAC,EAAD,CAAc4D,MAAM,gBAClB,kBAAC,IAAD,CACE5D,KAAMN,EAAmBuB,KAAKC,MAAMlB,KAAKiG,IAAIC,QAC7CC,OAAQ,CAACb,MAAO,IAAKc,OAAQ,c,GAfV5H,IAAMC,WC/WnC4H,EAAgB,SAACC,GACrB,OAAIvH,IAAEa,QAAQ0G,GACL,GAEF,CAAC,CACN1F,KAAM,MACN2F,YAAa,IACb7F,EAAG3B,IAAEE,IAAIqH,EAAM,QACf3F,EAAG5B,IAAEE,IAAIqH,EAAM,KACfE,QAAS,CACP5F,KAAM,OACN6F,SAAS,EACTC,MAAO3H,IAAEE,IAAIqH,EAAM,WA8EVK,E,2MAvEbC,WAAa,YAAmB,IAAD,mBAAhB/F,EAAgB,KAAVyF,EAAU,KAC7B,OAAIA,EAAKO,OAAS,EACT,KAIP,yBAAKvI,IAAKuC,GACR,uCAAaA,EAAb,SACA,kBAAC,IAAD,CACEb,KAAMqG,EAAcC,GACpBH,OAAQ,CAACb,MAAO,IAAKc,OAAQ,S,wEAOnC,GAAIrH,IAAEa,QAAQqB,KAAKC,MAAMlB,MACvB,OAAO,KAET,IAAM8G,EAAU7F,KAAKC,MAAMlB,KACrBD,EAAOhB,IAAEgB,KAAK+G,EAAQC,MAExBT,EAAOvH,IAAEE,IAAIc,GAAM,SAACiF,GAAD,MAAQ,CAC7BA,EAAGA,EACH+B,KAAMD,EAAQC,KAAK/B,GACnBgC,IAAKF,EAAQE,IAAIhC,OAEnBsB,EAAOvH,IAAEkI,OAAOX,EAAM,CAAC,SAEvB,IAAMY,EAAanI,IAAEoI,QAAQpI,IAAEqI,QAAQd,GAAM,SAACe,GAAD,OAAQtI,IAAE2C,MAAM2F,EAAGrC,EAAG,KAAK,OAGxE,OACE,6BACE,uDACA,sQACA,kBAAC,IAAD,CACEhF,KAAMqG,EAAcC,GACpBH,OAAQ,CAACb,MAAO,IAAKc,OAAQ,OAG/B,8EACCrH,IAAEE,IAAIiI,EAAYjG,KAAK2F,YAExB,wBAAIrI,UAAU,iBACZ,mDACA,4BAAI,+CACJ,4BAAI,kDAAJ,8FACA,4BAAI,kDACJ,4BAAI,iDAAJ,6CACA,4BAAI,+CACJ,4BAAI,mDAAJ,qEACA,4BAAI,iDACJ,4BAAI,qDAAJ,uEACA,4BAAI,oDACJ,4BAAI,qDAAJ,4CACA,4BAAI,gDACJ,4BAAI,wDAAJ,4CACA,4BAAI,wCACJ,4BAAI,gDAAJ,8CACA,4BAAI,yCACJ,4BAAI,wEAAJ,gEACA,4BAAI,mDACJ,4BAAI,kDAAJ,oM,GAjEsBC,IAAMC,W,0QCNtC,IAAM6I,GAAuB,SAACC,GAAD,gBAAUA,EAAEC,iBAAZ,oBAAwCD,EAAElI,aAGjEoI,G,gMAGF,OAAO,I,+BAGP,OACE,kBAAC,IAAD,CACE9I,OAAQsC,KAAKC,MAAMvC,OACnB+I,eAAe,EACfC,SAAU1G,KAAKC,MAAMyG,SACrBC,SAAU3G,KAAKC,MAAM0G,e,GAXVpJ,IAAMC,WAiBnBoJ,G,iLAEF,IAAMC,EAAWC,cAAH,MAQd,OACE,kBAAC,KAAD,CACEA,IAAKD,EACLE,KAAM,GACNC,MAAO,UACPC,QAASjH,KAAKC,MAAMgH,c,GAfP1J,IAAMC,WAsBrB0J,GAAmB,SAACnI,GACxB,OAAKjB,IAAE0G,IAAIzF,EAAM,uBAGjBA,EAAKoI,QAAQnC,IAAIC,OAASmC,IAAKC,MAAMtI,EAAKoI,QAAQnC,IAAIC,OAAQ,CAC5DqC,QAAQ,EACRC,eAAe,IAEZzJ,IAAEa,QAAQb,IAAE0G,IAAIzF,EAAM,uBAAwB,OACjDA,EAAKyI,UAAUxC,IAAIC,OAASmC,IAAKC,MAAMtI,EAAKyI,UAAUxC,IAAIC,OAAQ,CAChEqC,QAAQ,EACRC,eAAe,KAGZxI,GAZE,IAgBL0I,G,iLAEF,OAAI3J,IAAEa,QAAQqB,KAAKC,MAAMlB,MAChB,KAIP,yBAAKoE,MAAO,CAACuE,SAAU,aACrB,kBAAC,GAAD,CAAQT,QAASjH,KAAKC,MAAMgH,UAC5B,kBAACU,EAAA,EAAD,CAAOrK,UAAW0C,KAAKC,MAAMgH,QAAU,UAAY,GAAIW,iBAAkB,EAAGC,GAAG,4BAC7E,kBAACC,GAAA,EAAD,CAAKC,SAAU,EAAGpF,MAAM,SACtB,kBAAC,EAAD,OAEF,kBAACmF,GAAA,EAAD,CAAKC,SAAU,EAAGpF,MAAM,sBACtB,kBAAC,EAAD,CAAmB5D,KAAMiB,KAAKC,MAAMlB,KAAKiJ,sBAE3C,kBAACF,GAAA,EAAD,CAAKC,SAAU,EAAGpF,MAAM,yBACtB,kBAAC,EAAD,CAAsB5D,KAAMiB,KAAKC,MAAMlB,KAAKoI,QAASpC,UAAW/E,KAAKC,MAAM8E,YAC3E,kBAAC,EAAD,CAAWhG,KAAMiB,KAAKC,MAAMlB,KAAKoI,QAAQnC,a,GAlB/BzH,IAAMC,WA2BtByK,GAAa,CACjBlD,UAAW,GACXmD,QAAS,GACTjB,SAAS,GA6DIkB,G,YAzDb,WAAYlI,GAAQ,IAAD,8BACjB,4CAAMA,KAIRyG,SAAW,SAAC3B,GACV,IAAMqD,EAAM/B,GAAqBtB,GACjC,IAAIjH,IAAEmE,SAASmG,EAAK,aAApB,CACA,IAAM3E,EAAMC,kGAAuH0E,EAAM,QACnIC,EAAI,eACVA,EAAKpF,SAAS,CACZgE,SAAS,IAEXqB,IAAM9D,IAAIf,GACT8E,MAAK,SAACC,GACL,IAAMzJ,EAAOmI,GAAiBsB,EAASzJ,MACvCsJ,EAAKpF,SAAS,CACZ8B,UAAWA,EACXmD,QAASnJ,EACTkI,SAAS,OAEV,iBAnBH,EAAK1E,MAAQ0F,GAFI,E,sEA2BjB,OACA,yBAAK3K,UAAU,mBACb,yBAAKA,UAAU,qCACf,kBAACmL,GAAA,EAAD,KACE,kBAACzE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAK5G,IAAI,OAAO6G,GAAI,IAEpB,kBAACD,EAAA,EAAD,CAAK5G,IAAI,MAAM6G,GAAI,GACjB,yBAAKf,MAAO,CAACuF,OAAQ,gBAAiBC,UAAW,WAC/C,yBAAKxE,IAAI,OAAOC,IAAKV,wBAA4CyB,OAAQ,MAE3E,kBAAC,GAAD,CACEzH,OAAQA,IACRgJ,SAAU1G,KAAK0G,SACfC,SAAU,eAEZ,kBAAC,GAAD,CAAS5B,UAAW/E,KAAKuC,MAAMwC,UAAWhG,KAAMiB,KAAKuC,MAAM2F,QAASjB,QAASjH,KAAKuC,MAAM0E,WAE1F,kBAAChD,EAAA,EAAD,CAAK5G,IAAI,QAAQ6G,GAAI,OAKzB,6BAAK,6BAAK,6BAAK,6BAAK,kC,GAnDR3G,IAAMC,WCjGJoL,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,iB,iBErInBC,EAAOC,QAAU,CACf,QAAY,CACV,MAAU,eACV,OAAW,eACX,SAAa,aACb,cAAkB,QAClB,UAAc,aACd,cAAkB,WAClB,iBAAqB,WACrB,aAAiB,aACjB,cAAkB,6BAClB,WAAe,4BACf,aAAiB,qBACjB,iBAAqB,WACrB,UAAc,cAEhB,WAAe,CAAC,CACd,MAAU,EACV,QAAY,gBAEd,eAAmB,CAAC,CAClB,QAAY,cACZ,OAAW,CACT,WAAe,GACf,QAAY,CACV,OAAW,WAGf,OAAW,CACT,KAAS,UAEX,aAAiB,CAAC,CAChB,MAAU,EACV,cAAkB,eAGtB,aAAiB,CAAC,CAChB,cAAkB,WAClB,UAAc,CACd,CACE,WAAe,aACf,SAAa,gBACb,MAAU,CACR,KAAS,cACT,QAAY,CAAC,CACX,KAAS,gBACT,MAAU,iBACT,CACD,KAAS,UACT,MAAU,WACT,CACD,KAAS,WACT,MAAU,QACT,CACD,KAAS,MACT,MAAU,OACT,CACD,KAAS,4BACT,MAAU,YAKhB,CACE,WAAe,mBACf,SAAa,mBACb,MAAU,CACR,KAAS,cACT,QAAY,CAAC,CACX,KAAS,mCACT,MAAU,oBACT,CACD,KAAS,mCACT,MAAU,oBACT,CACD,KAAS,mCACT,MAAU,oBACT,CACD,KAAS,oCACT,MAAU,6B","file":"static/js/main.2169d86d.chunk.js","sourcesContent":["import React from 'react'\r\nimport { ProgressBar } from 'react-bootstrap'\r\n\r\nclass Intro extends React.Component {\r\n  render () {\r\n    return (\r\n      <div>\r\n        <h3>Introduction</h3>\r\n\r\n        <p>After reading <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.amazon.com/Advances-Financial-Machine-Learning-Marcos/dp/1119482089\">Advances in Financial Machine Learning</a> by Marcos Lopez de Prado I was incredibly motivated to further explore machine learning applications in  finance. I built <code>fincl</code> (the web app you're looking at right now) to encapsulate some of those learnings and buildings. The complete source code lives also on <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/dodafin/fincl\">GitHub</a>.</p>\r\n\r\n        <p>Automating the entire pipeline like I've done here is likely not the way an actual trading strategy would be implemented (unless attempting to build an automated ML platform like <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.h2o.ai/products/h2o-driverless-ai/\">H2O Driverless AI</a>) but I chose the mantra of \"build to learn\" for the techniques described in and learn I did while combining the various disparate techniques described in the book.</p>\r\n        <p>I've also included a historical backtest and tearsheet for people not familiar with ML classification reports (despite the many problems with such an evaluation method).</p>\r\n        <p>The frontend and backend are fully capable of both <strong>classical labeling</strong> (a ML classifier generates a trading signal) and <strong>meta-labeling</strong> (a ML classifier filters a trading signal) and while both methods managed to produce similar prediction scores, inconsistent results in the walk-forward PnL simulation of meta-labeling combined with a self-imposed deadline have made me include only the classical labeling results herein for the time being.</p>\r\n\r\n       <h3>Findings</h3>\r\n       <ul>\r\n        <li>Volume Ratio, Fractionally Differentiated Prices, Variance are the most important features over short forecast horizons (10 & 25 bars). (Further info under the \"Feature Importance\" tab)</li>\r\n        <li>Volume Ratio is the most important feature for almost all forecast horizons and lookback windows, except for 100 bar forecast horizons where most features except serial correlation perform well.</li>\r\n        <li>Rather than having learned exploitable patterns in the market data that is exploitable cross-asset, the ML models seem to have learned to differentiate between assets and go consistently long / short certain assets.</li>\r\n        <li>Tree-based models (RF, XGBoost, LGBM) all outperform kNN, our Dummy classifier and the \"Long All\" baseline.</li>\r\n        <li>Models tend to have higher prediction scores on shorter forecast horizons, however likely do not outperform due to higher slippage & trading costs.</li>\r\n        <li>The training data starts in 2007, which might be a reason for the models exhibiting a short bias (going short roughly 50%-100% more than going long).</li>\r\n        <li>The models perform surprisingly well despite being evaluated exclusively in a bull market (2014-2020).</li>\r\n\r\n       </ul>\r\n        <h3>Methods</h3>\r\n        <p>I'll briefly describe the <code>fincl</code> pipeline, from the original 1-minute bars all the way through label generation, model fitting and validation as well as PnL simulation.</p>\r\n        <p>Results or methodologies are indicated via the colored bars below each step.</p>\r\n        <p>To make the tool quick & easy-to-use I've precomputed all results and included them in the frontend payload.</p>\r\n        <h4>1. Load & sample bars</h4>\r\n        <p>\r\n            Load our bars, chunk them into dollar bars aiming to have 25 bars per day per symbol for the year 2019.\r\n        </p>\r\n        <ProgressBar now={100} label={\"Dollar bars\"} />\r\n        <h4>2. Downsample</h4>\r\n        <p>\r\n          A 100-day volatility estimate is taken and used as the basis for a symmetric CUSUM filter. This reduces the amount of rows to be evaluated by our models by e.g. roughly 50% on equity indices. This means that a forecast horizon of 10 bars on the E-Mini futures in the year 2019 would equate to roughly 20 hourly time bars (25 volume bars per day downsampled to 12.5 bars per day) or a forecast horizon of about a day.\r\n        </p>\r\n        <ProgressBar striped now={100} label={\"Downsampled events\"} />\r\n        <h4>3. Binarize</h4>\r\n        <p>\r\n            Binarize the rows, i.e. for every row determine a forward returns window which is then used to calculate that row's label (i.e. positive returns over the forward looking window as a <code>{1}</code> for the classifier).\r\n        </p>\r\n        <ProgressBar striped now={100} label={\"Downsampled events with fixed horizon timestamps into the future\"} />\r\n        <h4>4. Feature engineering</h4>\r\n        <p>\r\n          A features matrix is constructed. Further information on the specific features, their definitions and parameters can be found under the \"Feature Importance\" tab.\r\n        </p>\r\n        <ProgressBar now={100} label={\"Features computed on full dataset\"} />\r\n        <h4>5. Label data</h4>\r\n        <p>\r\n          <code>{\"{Negative,positive}\"}</code> returns over the forward forecast horizon are used to generate <code>{\"{1,-1}\"}</code> labels.\r\n        </p>\r\n        <ProgressBar now={100} label={\"Full dataset with features & truth labels\"} />\r\n        <h4>6. Train/Test split</h4>\r\n        <p>\r\n            Exclude rows from our engineered features which haven't completed the warmup for all feature columns\r\n            and split the set 50/50 into train & test set.\r\n        </p>\r\n        <ProgressBar>\r\n          <ProgressBar bsStyle=\"success\" now={50} key={1} label={\"Train set\"} />\r\n          <ProgressBar bsStyle=\"danger\" now={50} key={2} label={\"Test set\"} />\r\n        </ProgressBar>\r\n        <h4>7. Feature importances</h4>\r\n        <p>\r\n          We calculate parallelized MDA feature importances. This means that for every symbol we run a loop excluding one of the features and comparing how much worse our predictions get without that feature.\r\n        </p>\r\n        <p>\r\n          This is done with purged K-Fold CV and the calculated feature importances are therefore out-of-sample and predictive (rather than explanatory like MDI feature importances).\r\n          The per-symbol calculated features are then combined into one general set of feature importances across the investment universe.\r\n        </p>\r\n        <ProgressBar>\r\n          <ProgressBar bsStyle=\"success\" now={40} key={1} label={\"Train set\"} />\r\n          <ProgressBar bsStyle=\"info\" now={10} key={2} label={\"Val. set\"} />\r\n        </ProgressBar>\r\n        <ProgressBar>\r\n          <ProgressBar bsStyle=\"success\" now={30} key={1} label={\"Train set\"} />\r\n          <ProgressBar bsStyle=\"info\" now={10} key={2} label={\"Val. set\"} />\r\n          <ProgressBar bsStyle=\"success\" now={10} key={3} label={\"Train set\"} />\r\n        </ProgressBar>\r\n        <ProgressBar>\r\n          <ProgressBar bsStyle=\"success\" now={20} key={1} label={\"Train set\"} />\r\n          <ProgressBar bsStyle=\"info\" now={10} key={2} label={\"Val. set\"} />\r\n          <ProgressBar bsStyle=\"success\" now={20} key={3} label={\"Train set\"} />\r\n        </ProgressBar>\r\n        <ProgressBar>\r\n          <ProgressBar bsStyle=\"success\" now={10} key={1} label={\"Train set\"} />\r\n          <ProgressBar bsStyle=\"info\" now={10} key={2} label={\"Val. set\"} />\r\n          <ProgressBar bsStyle=\"success\" now={30} key={3} label={\"Train set\"} />\r\n        </ProgressBar>\r\n        <ProgressBar>\r\n          <ProgressBar bsStyle=\"info\" now={10} key={1} label={\"Val. set\"} />\r\n          <ProgressBar bsStyle=\"success\" now={40} key={2} label={\"Train set\"} />\r\n        </ProgressBar>\r\n        <h4>8. Pick important features </h4>\r\n        <p>\r\n            Join the feature importances computed parallelized & per-symbol into one dataframe\r\n            Pick features that help our classifier's predictive abilities\r\n        </p>\r\n        <ProgressBar>\r\n          <ProgressBar bsStyle=\"success\" now={50} key={1} label={\"Train set without unimportant features\"} />\r\n          <ProgressBar bsStyle=\"danger\" now={50} key={2} label={\"Test set without unimportant features\"} />\r\n        </ProgressBar>\r\n        <h4>9. Model</h4>\r\n        <p>\r\n          Using Purged K-Fold CV on the train set alone we run a randomized Grid search to find the best set of hyper parameters which are then used for the final walk-forward validation run.\r\n          The cross-validation strategy is the same as for the calculation of feature importances above.\r\n        </p>\r\n        <h4>10. Reports</h4>\r\n        <p>\r\n          The final model validation is done via purged walk-forward cross-validation. Any rows overlapping train & test sets are purged.\r\n        </p>\r\n        <p>\r\n          Classification reports, F1 scores and confusion matrixes are generated.\r\n        </p>\r\n        <ProgressBar>\r\n          <ProgressBar bsStyle=\"success\" now={59} key={1} label={\"Train set\"} />\r\n          <ProgressBar bsStyle=\"warning\" now={1} key={2} />\r\n          <ProgressBar bsStyle=\"danger\" now={10} key={3} label={\"Test set\"} />\r\n        </ProgressBar>\r\n        <ProgressBar>\r\n          <ProgressBar bsStyle=\"success\" now={69} key={1} label={\"Train set\"} />\r\n          <ProgressBar bsStyle=\"warning\" now={1} key={2} />\r\n          <ProgressBar bsStyle=\"danger\" now={10} key={3} label={\"Test set\"} />\r\n        </ProgressBar>\r\n        <ProgressBar>\r\n          <ProgressBar bsStyle=\"success\" now={79} key={1} label={\"Train set\"} />\r\n          <ProgressBar bsStyle=\"warning\" now={1} key={2} />\r\n          <ProgressBar bsStyle=\"danger\" now={10} key={3} label={\"Test set\"} />\r\n        </ProgressBar>\r\n        <ProgressBar>\r\n          <ProgressBar bsStyle=\"success\" now={89} key={1} label={\"Train set\"} />\r\n          <ProgressBar bsStyle=\"warning\" now={1} key={2} />\r\n          <ProgressBar bsStyle=\"danger\" now={10} key={3} label={\"Test set\"} />\r\n        </ProgressBar>\r\n        <h4>11. Tearsheets</h4>\r\n        <p>\r\n          The average active signal is calculated and that series is then turned into a PnL graph with the trading logic / position sizing inspired by <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/pulse/implement-cta-less-than-10-lines-code-thomas-schmelzer/\">Thomas Schmelzer's 10-line-CTA</a>.\r\n          Performance stats, a drawndown table and a <code>pyfolio</code> returns tear-sheet are then generated (comparing results to a \"long-all\" Risk Parity like strategy).\r\n        </p>\r\n        <ProgressBar>\r\n          <ProgressBar className=\"progress-bar-gray\" now={60} key={1} label={\"\"} />\r\n          <ProgressBar bsStyle=\"danger\" now={40} key={2} label={\"PnL report on test set\"} />\r\n        </ProgressBar>\r\n\r\n        <h3>Weaknesses</h3>\r\n        <ul>\r\n          <li>Large amounts of trials means a false discovery is likely</li>\r\n          <li>Trading costs are estimated rather optimistically at $1 per contract + a slippage of 25% of the <code>mintick</code></li>\r\n          <li>No roll cost simulation</li>\r\n          <li>Differing base currencies are not taken into account</li>\r\n          <li>Coarse 1-minute bars are used as a base</li>\r\n          <li>Cross-validation is purged but not embargoed</li>\r\n          <li>Likely bugs in code (code was tested in units by hand only)</li>\r\n          <li>This being a learning project and the involved large amount of data accesses make a false discovery likely</li>\r\n        </ul>\r\n\r\n\r\n        <h3>Ideas for improvement</h3>\r\n\r\n        <ul>\r\n          <li>Automatically verify stationarity of features (only done so by hand)</li>\r\n          <li>Dimensionality reduction (PCA, t-SNE)</li>\r\n          <li><strong>Develop &amp; combine models:</strong>\r\n            <ul>\r\n              <li>Develop additional models for time periods where the first round of models perform poorly</li>\r\n              <li>Develop additional models for different asset classes</li>\r\n              <li>Develop additional models that only go long / only go short</li>\r\n              <li>Develop additional models for different market regimes</li>\r\n              <li>Develop additional models that target different labels (such as change in volatility, skewness / kurtosis of returns, serial correlation)</li>\r\n              <li>Develop additional models with varying subsets of additional features</li>\r\n              <li>Use clustering to find unique models and select a diverse subset</li>\r\n              <li>Explore blending / stacking for all the above</li>\r\n            </ul>\r\n          </li>\r\n          <li>Auto-ML libraries (such as <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/EpistasisLab/tpot\">tpot</a>)</li>\r\n          <li>Alternative Hyperparameter Optimization strategies (such as <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ml.dask.org/modules/generated/dask_ml.model_selection.HyperbandSearchCV.html\">Hyperband search</a>)</li>\r\n          <li>Compute Feature Importance in a stacked, rather than parallelized manner</li>\r\n          <li>Include non-micro-structural features (such as Entropy or <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://mlfinlab.readthedocs.io/en/latest/implementations/structural_breaks.html\">Structural Breaks</a>), in general the area of feature engineering has remained almost entirely unoptimized in an effort to get the general shape of the pipeline correct</li>\r\n          <li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.com/@samuel.monnier/cross-validation-tools-for-time-series-ffa1a5a09bf9\">CPCV</a> on test set (Walk-Forward is chosen for simplicity' sake / to be reusable for the historical backtest)</li>\r\n          <li>Re-calculate feature importances and hyper parameters during final test set evaluation as well</li>\r\n          <li>Sample weighting (uniqueness weighting, sequential bootstrapping)</li>\r\n          <li>Use tick data rather than sampling from 1-minute bars</li>\r\n          <li>Add more data sources (such as VIX, options market data, fundamental data, shape of the yield curve, etc.)</li>\r\n          <li>Try out different bar sampling methods (such as <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://mlfinlab.readthedocs.io/en/latest/implementations/data_structures.html#information-driven-bars\">Dollar Imbalance Bars</a>)</li>\r\n          <li>Try different roll methods for the futures contracts (IQFeed default continuous contract data is used)</li>\r\n          <li>Try further <code>d</code> values for Fractionally Differentiated Features (0.5 is used as a catch-all)</li>\r\n          <li>Try <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.com/datadriveninvestor/improve-your-classification-models-using-mean-target-encoding-a3d573df31e8\">Target/Mean Encoding</a> (i.e. a given feature is computed from a larger subset of the data rather than just the current instrument, say returns of the sector, or returns relative to the sector)</li>\r\n          <li>Try different targets for CUSUM downsampling (currently a 100-day EWM of the return's standard deviation is used)</li>\r\n          <li>Try a different bet sizing strategy (currently the average of active signals is used)</li>\r\n          <li>Explore different strategies/composed instruments (calendar spreads, curve steepeners, options structures etc.)</li>\r\n          <li>Explore <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://dask-ml.readthedocs.io/en/latest/\">dask-ml</a> and GPU-accelerated learning (e.g. <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/rapidsai/cuml\">cuML</a>, or GPU modes for XGBoost, LightGBM)</li>\r\n          <li>Browse Kaggle ML competitions / academic literature for new techniques to try</li>\r\n        </ul>\r\n\r\n         <h3>Inspiration &amp; Thanks</h3>\r\n        <ul>\r\n          <li>Marcel Lopez de Prado for his work on <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.amazon.com/Advances-Financial-Machine-Learning-Marcos/dp/1119482089\">Advances in Financial Machine Learning</a>. Learning &amp; applying machine learning and the techniques in his book has consumed most my every working minute in the past 3 months. :)</li>\r\n          <li>Thomas Schmelzer for his work on <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/pulse/implement-cta-less-than-10-lines-code-thomas-schmelzer/\">10 line CTA</a>. His code opened my eyes to the fact that (rough) PnL simulations can be done in a lot less code than libraries like quantopian's <code>zipline</code> implied</li>\r\n          <li>Hudson &amp; Thames for their work on <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/hudson-and-thames/mlfinlab/\">mlfinlab</a> which I used for their implementations of volume bar sampling &amp; a few micro-structural features</li>\r\n          <li>Samuel Monnier for his work on <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/sam31415/timeseriescv\">timeseriescv</a> which I used for walk-forward testing</li>\r\n          <li>\r\n            Ernest Chan for his tip in one of his podcasts (I don't recall which one) that he's found it a lot better to a beefy workstation at home than trying to do computations in the cloud.\r\n            When you're renting spot instances in the cloud you're always asking yourself \"is it worth it?\"... In the process of working on <code>fincl</code> I upgraded my 6-core Intel with the newly released 16-core AMD CPU.\r\n            I love having this thick workhorse sitting under my desk and it motivates me to always have some computation running over night :)\r\n        </li>\r\n        </ul>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Intro","import Plot from 'react-plotly.js'\r\nimport React from 'react'\r\nimport _ from 'lodash'\r\n\r\nimport './App.css'\r\nimport schema from './schema.js'\r\n\r\nimport { Row, Col, Table, Panel, Glyphicon } from 'react-bootstrap'\r\nimport SYMBOLS_JSON from './symbols.json'\r\n\r\nconst QUESTIONS = schema.questionSets[0].questions\r\n\r\nconst QUESTIONS_MAPPED = _.fromPairs(_.map(QUESTIONS, (val) => [val.questionId, val]))\r\nconst CLASSIFIER_OPTIONS = _.fromPairs(_.map(QUESTIONS_MAPPED.classifier.input.options, (val) => [val.value, val.text]))\r\n\r\nconst isInt = (n) => n % 1 === 0\r\n\r\nconst getSignalsPlotData = (signals) => {\r\n  if (_.isEmpty(signals)) {\r\n    return {}\r\n  }\r\n  const symbols = _.filter(_.keys(signals.data[0]))\r\n  const x_rows = []\r\n  const y_rows = _.fromPairs(_.map(symbols, (s) => [s, []]))\r\n\r\n\r\n  _.forEach(signals.data, (row) => {\r\n    x_rows.push(row[\"\"])\r\n    _.forEach(symbols, (symbol) => {\r\n      y_rows[symbol].push(row[symbol])\r\n    })\r\n  })\r\n\r\n  const traces = _.map(symbols, (symbol) => {\r\n    const v = _.replace(symbol, '#C', '')\r\n\r\n    return {\r\n      x: x_rows,\r\n      y: y_rows[symbol],\r\n      type: 'scatter',\r\n      name: SYMBOLS_JSON.Bloomberg[v] || v,\r\n    }\r\n  })\r\n\r\n  return traces\r\n}\r\n\r\nclass ConfusionMatrixTable extends React.Component {\r\n  render () {\r\n    if (_.isEmpty(this.props.data)) {\r\n      return null\r\n    }\r\n    const rep = this.props.data.confusion_matrix\r\n    const c_rep = this.props.data.classification_report\r\n    const [k1, k2] = _.has(c_rep, '0.0') ? ['0.0', '1.0'] : ['-1.0', '1.0']\r\n    const [l1, l2] = [_.split(k1, '.')[0], _.split(k2, '.')[0]]\r\n    return (\r\n      <Table striped bordered condensed hover>\r\n        <thead>\r\n          <tr>\r\n            <th></th>\r\n            <th>Predicted {l1}</th>\r\n            <th>Predicted {l2}</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>Label {l1}</td>\r\n            <td>{rep[0][0]}</td>\r\n            <td>{rep[0][1]}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Label {l2}</td>\r\n            <td>{rep[1][0]}</td>\r\n            <td>{rep[1][1]}</td>\r\n          </tr>\r\n        </tbody>\r\n      </Table>\r\n    )\r\n  }\r\n}\r\n\r\nclass ClassificationReportTable extends React.Component {\r\n  render () {\r\n    if (_.isEmpty(this.props.data)) {\r\n      return null\r\n    }\r\n    const rep = this.props.data\r\n    const [k1, k2] = _.has(rep, '0.0') ? ['0.0', '1.0'] : ['-1.0', '1.0']\r\n    const [l1, l2] = [_.split(k1, '.')[0], _.split(k2, '.')[0]]\r\n    return (\r\n      <Table striped bordered condensed hover>\r\n        <thead>\r\n          <tr>\r\n            <th></th>\r\n            <th>Precision</th>\r\n            <th>Recall</th>\r\n            <th>F1-score</th>\r\n            <th>Support</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>{l1}</td>\r\n            <td>{rep[k1].precision.toFixed(3)}</td>\r\n            <td>{rep[k1].recall.toFixed(3)}</td>\r\n            <td>{rep[k1]['f1-score'].toFixed(3)}</td>\r\n            <td>{rep[k1].support}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>{l2}</td>\r\n            <td>{rep[k2].precision.toFixed(3)}</td>\r\n            <td>{rep[k2].recall.toFixed(3)}</td>\r\n            <td>{rep[k2]['f1-score'].toFixed(3)}</td>\r\n            <td>{rep[k2].support}</td>\r\n          </tr>\r\n          <tr>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n          </tr>\r\n          <tr>\r\n            <td>Accuracy</td>\r\n            <td></td>\r\n            <td></td>\r\n            <td>{rep.accuracy.toFixed(3)}</td>\r\n            <td>{rep['macro avg'].support}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Macro Avg.</td>\r\n            <td>{rep['macro avg'].precision.toFixed(3)}</td>\r\n            <td>{rep['macro avg'].recall.toFixed(3)}</td>\r\n            <td>{rep['macro avg']['f1-score'].toFixed(3)}</td>\r\n            <td>{rep['macro avg'].support}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Weighted Avg.</td>\r\n            <td>{rep['weighted avg'].precision.toFixed(3)}</td>\r\n            <td>{rep['weighted avg'].recall.toFixed(3)}</td>\r\n            <td>{rep['weighted avg']['f1-score'].toFixed(3)}</td>\r\n            <td>{rep['weighted avg'].support}</td>\r\n          </tr>\r\n        </tbody>\r\n      </Table>\r\n    )\r\n  }\r\n}\r\n\r\nclass ClassificationReportScoresTable extends React.Component {\r\n  render () {\r\n    return (\r\n      <Table striped bordered condensed hover >\r\n        <tbody>\r\n          <tr>\r\n            {!_.isNull(this.props.roc_auc_score) ? <td className=\"col-md-3\">ROC AUC Score</td> : null}\r\n            {!_.isNull(this.props.roc_auc_score) ? <td className=\"col-md-3\">{this.props.roc_auc_score.toFixed(3)}</td> : null}\r\n          </tr>\r\n          <tr>\r\n            {!_.isNull(this.props.f1_score) ? <td className=\"col-md-3\">F1 Score</td> : null}\r\n            {!_.isNull(this.props.f1_score) ? <td className=\"col-md-3\">{this.props.f1_score.toFixed(3)}</td> : null}\r\n          </tr>\r\n        </tbody>\r\n      </Table>\r\n    )\r\n  }\r\n}\r\n\r\nclass SimpleTable extends React.Component {\r\n  render () {\r\n    return (\r\n      <Table striped bordered condensed hover>\r\n        <tbody>\r\n          {_.map(this.props.data, (value, key) => {\r\n            return (\r\n              <tr key={key}>\r\n                <td className=\"col-md-3\">{key}</td>\r\n                <td className=\"col-md-3\">{value}</td>\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n    )\r\n  }\r\n}\r\n\r\nclass MultiTable extends React.Component {\r\n  render () {\r\n    const data = this.props.data\r\n    const cols = _.keys(data)\r\n    const indices = _.keys(data[cols[0]])\r\n\r\n    let PERC_COLS = ['Net drawdown in %']\r\n    let DATE_COLS = ['Peak date', 'Valley date', 'Recovery date']\r\n    const format_num = (v, col) => {\r\n      if (_.includes(v, '0001-01-01')) return 'TBD'\r\n      if (_.includes(DATE_COLS, col)) return _.split(v, 'T')[0]\r\n      if (_.includes(PERC_COLS, col)) return v.toFixed(2) + '%'\r\n      return v\r\n    }\r\n\r\n    return (\r\n      <Table striped bordered condensed hover>\r\n        <thead>\r\n          <tr>\r\n            {_.map(cols, (value, key) => <th key={key}>{value}</th>)}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {_.map(indices, (row) => {\r\n            return (\r\n              <tr key={row}>\r\n                {_.map(cols, (col) => <td key={col}>{format_num(data[col][row], col)}</td>) }\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nclass MultiTableSymbols extends React.Component {\r\n  render () {\r\n    const data = this.props.data\r\n    const cols = _.keys(data)\r\n    const indices = _.keys(data[cols[0]])\r\n\r\n    return (\r\n      <Table striped bordered condensed hover>\r\n        <thead>\r\n          <tr>\r\n            {_.map(cols, (value, key) => <th key={key}>{_.startCase(value)}</th>)}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {_.map(indices, (row) => {\r\n            return (\r\n              <tr key={row}>\r\n                {_.map(cols, (col) => <td key={col}>{data[col][row]}</td>) }\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n    )\r\n  }\r\n}\r\n\r\nclass HidablePanel extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.state = {\r\n      open: !!props.defaultOpen,\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <Panel key={this.props.title} expanded={this.state.open} onToggle={() => {}}>\r\n        <Panel.Heading>\r\n          <Panel.Title className=\"clicky-hover\" onClick={() => this.setState({ open: !this.state.open })}>\r\n            <h3>{this.props.title} <Glyphicon style={{float: \"right\"}} glyph={`chevron-${this.state.open ? \"up\" : \"down\"}`} /></h3>\r\n          </Panel.Title>\r\n        </Panel.Heading>\r\n        <Panel.Collapse>\r\n          {this.props.children}\r\n        </Panel.Collapse>\r\n      </Panel>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nclass PnLReport extends React.Component {\r\n  render () {\r\n    if (_.isEmpty(this.props.data)) {\r\n      return null\r\n    }\r\n\r\n    const url = process.env.PUBLIC_URL + '/payloads/' + this.props.data.fig_file_name\r\n    let { p_stats, dd_table } = this.props.data\r\n    let PERC_STATS = ['Annual return', 'Cumulative returns', 'Annual volatility', 'Max drawdown', 'Daily value at risk']\r\n    const format_num = (k, v) => {\r\n      if (!v) return ''\r\n      return _.includes(PERC_STATS, k) ? (v * 100).toFixed(2) + '%' : v.toFixed(2)\r\n    }\r\n    p_stats = _.fromPairs(_.map(\r\n      p_stats, (v,k) => ([k, format_num(k, v)])\r\n    ))\r\n\r\n    return (\r\n      <div className=\"pnl_report\">\r\n        <Row key=\"pstats\">\r\n          <Col md={12}>\r\n            <HidablePanel title=\"Performance stats\" defaultOpen>\r\n              <Row key=\"pstats\">\r\n                <Col md={6}>\r\n                  <SimpleTable data={p_stats} />\r\n                </Col>\r\n              </Row>\r\n              <h4>Drawdowns</h4>\r\n              <MultiTable data={dd_table} />\r\n              <p>Performance stats and tearsheet are calculated from EOD (end-of-day) returns series</p>\r\n            </HidablePanel>\r\n          </Col>\r\n        </Row>\r\n        <Row key=\"symbols\">\r\n          <Col md={12}>\r\n            <HidablePanel title=\"Symbols table\">\r\n              <MultiTableSymbols data={SYMBOLS_JSON} />\r\n            </HidablePanel>\r\n          </Col>\r\n        </Row>\r\n        <Row key=\"tearsheet\">\r\n          <Col md={12}>\r\n            <HidablePanel title=\"Tearsheet\" defaultOpen>\r\n              <img alt=\"tearsheet\" src={url} width=\"100%\" style={{padding: '20px'}} />\r\n            </HidablePanel>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass ClassificationReportExplanation extends React.Component {\r\n  render () {\r\n    if (_.isEmpty(this.props.data)) {\r\n      return null\r\n    }\r\n    let classifier = _.get(this.props, 'data.classifier', 'random_forest')\r\n\r\n    let classifier_str = CLASSIFIER_OPTIONS[classifier]\r\n    return <p>The classification report describes the signal generated by a <strong>{classifier_str}</strong> classifier. The predictions fall between <code>{\"{-1,1} {short,long}\"}</code>,\r\n    with label targets <code>{\"{-1,1} {negative,positive}\"}</code> indicating the returns over the forecast horizon. The average active signal is then used as final trading signal.</p>\r\n  }\r\n}\r\n\r\nclass ClassificationReportData extends React.Component {\r\n  render () {\r\n    if (_.isEmpty(this.props.data)) {\r\n      return null\r\n    }\r\n    let hyper_params = _.omit(this.props.data.hyper_params, ['n_jobs'])\r\n    hyper_params = _.fromPairs(_.map(hyper_params, (value, key) => [key, isInt(value) ? value : value.toFixed(2)] ))\r\n\r\n    return (\r\n      <div>\r\n        <ClassificationReportTable data={this.props.data.classification_report} />\r\n        <h5>Confusion Matrix:</h5>\r\n        <ConfusionMatrixTable data={this.props.data} />\r\n        <Row>\r\n          <Col md={6}>\r\n            <h5>Scores:</h5>\r\n            <ClassificationReportScoresTable roc_auc_score={this.props.data.roc_auc_score} f1_score={this.props.data.f1_score} />\r\n          </Col>\r\n          <Col md={6}>\r\n            <h5>Hyper Parameters:</h5>\r\n            <SimpleTable data={hyper_params} />\r\n          </Col>\r\n        </Row>\r\n  </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass ClassificationReport extends React.Component {\r\n  render () {\r\n    if (_.isEmpty(this.props.data)) {\r\n      return null\r\n    }\r\n    return (\r\n        <Row key=\"pstats\">\r\n          <Col md={12}>\r\n            <HidablePanel title=\"Classification report\" defaultOpen>\r\n             <ClassificationReportExplanation data={this.props.form_data} />\r\n             <ClassificationReportData data={this.props.data} />\r\n            </HidablePanel>\r\n            <HidablePanel title=\"Signals plot\">\r\n              <Plot\r\n                data={getSignalsPlotData(this.props.data.pnl.signal)}\r\n                layout={{width: 700, height: 500}}\r\n              />\r\n            </HidablePanel>\r\n          </Col>\r\n        </Row>\r\n    )\r\n  }\r\n}\r\n\r\nexport {ClassificationReport, PnLReport}\r\n","import React from 'react'\r\nimport _ from 'lodash'\r\nimport Plot from 'react-plotly.js'\r\n\r\nconst getFIPlotData = (imps) => {\r\n  if (_.isEmpty(imps)) {\r\n    return {}\r\n  }\r\n  return [{\r\n    type: 'bar',\r\n    orientation: 'h',\r\n    x: _.map(imps, 'mean'),\r\n    y: _.map(imps, 'k'),\r\n    error_x: {\r\n      type: \"data\",\r\n      visible: true,\r\n      array: _.map(imps, 'std'),\r\n    },\r\n  }]\r\n}\r\n\r\n\r\nclass FeatureImportance extends React.Component {\r\n  renderPlot = ([name, imps]) => {\r\n    if (imps.length < 2) {\r\n      return null\r\n    }\r\n\r\n    return (\r\n      <div key={name}>\r\n        <h3>Window: {name} bars</h3>\r\n        <Plot\r\n          data={getFIPlotData(imps)}\r\n          layout={{width: 800, height: 400, }}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render () {\r\n    if (_.isEmpty(this.props.data)) {\r\n      return null\r\n    }\r\n    const featImp = this.props.data\r\n    const keys = _.keys(featImp.mean)\r\n\r\n    let imps = _.map(keys, (k) => ({\r\n      k: k,\r\n      mean: featImp.mean[k],\r\n      std: featImp.std[k]\r\n    }))\r\n    imps = _.sortBy(imps, ['mean'])\r\n\r\n    const imp_groups = _.toPairs(_.groupBy(imps, (it) => _.split(it.k, '_')[1]))\r\n\r\n\r\n    return (\r\n      <div>\r\n        <h2>All feature importances</h2>\r\n        <p>Feature importances are calculated in a parallelized manner (MDA feature importances calculated per instrument and then averaged). All features with a feature importance greater than 0 are then used for model training & evaluation.</p>\r\n        <Plot\r\n          data={getFIPlotData(imps)}\r\n          layout={{width: 800, height: 1000, }}\r\n        />\r\n\r\n        <h2>Feature Importances grouped by lookback window</h2>\r\n        {_.map(imp_groups, this.renderPlot)}\r\n\r\n        <dl className=\"dl-horizontal\">\r\n          <h3>Feature definitions</h3>\r\n          <dt><code>roll(window)</code></dt>\r\n          <dd><strong>Roll measure: </strong>The Roll measure attempts to estimate the bid-ask spread (i.e. liquidity) of an instrument</dd>\r\n          <dt><code>rollimp(window)</code></dt>\r\n          <dd><strong>Roll Impact: </strong>The Roll measure divided by dollar volume</dd>\r\n          <dt><code>kyle(window)</code></dt>\r\n          <dd><strong>Kyle's lambda: </strong>A measure of market impact cost (i.e. liquidity) from Kyle (1985)</dd>\r\n          <dt><code>amihud(window)</code></dt>\r\n          <dd><strong>Amihud's lambda: </strong>A measure of market impact cost (i.e. liquidity) from Amihud (2002)</dd>\r\n          <dt><code>auto(window, lag)</code></dt>\r\n          <dd><strong>Autocorrelation: </strong>The raw price series' serial correlation</dd>\r\n          <dt><code>stdev(window)</code></dt>\r\n          <dd><strong>Standard deviation: </strong>The raw price series' standard deviation</dd>\r\n          <dt><code>log()</code></dt>\r\n          <dd><strong>Log prices: </strong>First difference of log-transformed prices</dd>\r\n          <dt><code>ffd(d)</code></dt>\r\n          <dd><strong>Fractionally differentiated prices: </strong>Achieving stationary in price series while preserving memory</dd>\r\n          <dt><code>volratio(window)</code></dt>\r\n          <dd><strong>Volume ratio: </strong>Exponentially weighted MA of buy volume (as estimated by the tick rule on 1-minute bars) divided by total volume (i.e. a value greather than 0.50 indicates buyers are driving the market)</dd>\r\n        </dl>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default FeatureImportance\r\n","import React from 'react'\r\nimport Winterfell from 'winterfell'\r\nimport axios from 'axios'\r\nimport Papa from 'papaparse'\r\nimport _ from 'lodash'\r\n\r\nimport './App.css'\r\nimport schema from './schema.js'\r\nimport Intro from './Intro.js'\r\nimport {ClassificationReport, PnLReport} from './Reports.js'\r\nimport FeatureImportance from './FeatureImportance.js'\r\nimport { css } from \"@emotion/core\";\r\n\r\nimport { Grid, Row, Col, Tabs, Tab } from 'react-bootstrap'\r\nimport GridLoader from \"react-spinners/GridLoader\"\r\n\r\nconst makePayloadStringObj = (p) => `${p.forecast_horizon}_none_[]_${p.classifier}`\r\n\r\n\r\nclass Form extends React.Component {\r\n  shouldComponentUpdate() {\r\n    // the moment Winterfell rerenders, it causes formData state to disappear\r\n    return false;\r\n  }\r\n  render () {\r\n    return (\r\n      <Winterfell\r\n        schema={this.props.schema}\r\n        disableSubmit={true}\r\n        onUpdate={this.props.onUpdate}\r\n        onSubmit={this.props.onSubmit}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nclass Loader extends React.Component {\r\n  render () {\r\n    const override = css`\r\n      display: block;\r\n      margin: 0 auto;\r\n      position: absolute;\r\n      top: -5px;\r\n      right: 0;\r\n      z-index: 100000;\r\n    `\r\n    return (\r\n      <GridLoader\r\n        css={override}\r\n        size={10}\r\n        color={\"#ffaa00\"}\r\n        loading={this.props.loading}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\n\r\nconst parseBackendData = (data) => {\r\n  if (!_.get(data, 'primary.pnl.signal')) {\r\n    return {}\r\n  }\r\n  data.primary.pnl.signal = Papa.parse(data.primary.pnl.signal, {\r\n    header: true,\r\n    dynamicTyping: true,\r\n  })\r\n  if (!_.isEmpty(_.get(data, 'secondary.pnl.signal', {}))) {\r\n    data.secondary.pnl.signal = Papa.parse(data.secondary.pnl.signal, {\r\n      header: true,\r\n      dynamicTyping: true,\r\n    })\r\n  }\r\n  return data\r\n}\r\n\r\n\r\nclass Reports extends React.Component {\r\n  render () {\r\n    if (_.isEmpty(this.props.data)) {\r\n      return null\r\n    }\r\n\r\n    return (\r\n      <div style={{position: \"relative\"}}>\r\n        <Loader loading={this.props.loading} />\r\n        <Tabs  className={this.props.loading ? \"loading\" : \"\"} defaultActiveKey={1} id=\"uncontrolled-tab-example\">\r\n          <Tab eventKey={1} title=\"Intro\">\r\n            <Intro />\r\n          </Tab>\r\n          <Tab eventKey={2} title=\"Feature Importance\">\r\n            <FeatureImportance data={this.props.data.feature_importance} />\r\n          </Tab>\r\n          <Tab eventKey={3} title=\"Classification Report\">\r\n            <ClassificationReport data={this.props.data.primary} form_data={this.props.form_data} />\r\n            <PnLReport data={this.props.data.primary.pnl} />\r\n          </Tab>\r\n        </Tabs>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nconst INIT_STATE = {\r\n  form_data: {},\r\n  reports: {},\r\n  loading: false,\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = INIT_STATE\r\n  }\r\n\r\n  onUpdate = (form_data) => {\r\n    const str = makePayloadStringObj(form_data)\r\n    if (_.includes(str, 'undefined')) return\r\n    const url = process.env.PUBLIC_URL + '/payloads/f_payload_agriculture-currency-energy-equity_index-interest_rate-metals_dollar_' + str + '.json'\r\n    const that = this\r\n    that.setState({\r\n      loading: true,\r\n    })\r\n    axios.get(url)\r\n    .then((response) => {\r\n      const data = parseBackendData(response.data)\r\n      that.setState({\r\n        form_data: form_data,\r\n        reports: data,\r\n        loading: false,\r\n      })\r\n    }, () => {\r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"App row justify-content-md-center\">\r\n      <Grid>\r\n        <Row>\r\n          <Col key=\"left\" md={2}>\r\n          </Col>\r\n          <Col key=\"mid\" md={8}>\r\n            <div style={{margin: '30px 0 20px 0', textAlign: 'center'}}>\r\n              <img alt=\"logo\" src={process.env.PUBLIC_URL + '/fincl-logo.png'} height={40} />\r\n            </div>\r\n            <Form\r\n              schema={schema}\r\n              onUpdate={this.onUpdate}\r\n              onSubmit={() => {}}\r\n            />\r\n            <Reports form_data={this.state.form_data} data={this.state.reports} loading={this.state.loading} />\r\n          </Col>\r\n          <Col key=\"right\" md={2}>\r\n          </Col>\r\n        </Row>\r\n      </Grid>\r\n      </div>\r\n      <br/><br/><br/><br/><br/>\r\n    </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = {\r\n  \"classes\" : {\r\n    \"input\" : \"form-control\",\r\n    \"select\" : \"form-control\",\r\n    \"question\" : \"form-group\",\r\n    \"radioListItem\" : \"radio\",\r\n    \"radioList\" : \"clean-list\",\r\n    \"checkboxInput\" : \"checkbox\",\r\n    \"checkboxListItem\" : \"checkbox\",\r\n    \"checkboxList\" : \"clean-list\",\r\n    \"controlButton\" : \"btn btn-primary pull-right\",\r\n    \"backButton\" : \"btn btn-default pull-left\",\r\n    \"errorMessage\" : \"alert alert-danger\",\r\n    \"questionPostText\" : \"push-top\",\r\n    \"buttonBar\" : \"button-bar\"\r\n  },\r\n  \"formPanels\" : [{\r\n    \"index\" : 1,\r\n    \"panelId\" : \"final-panel\"\r\n  }],\r\n  \"questionPanels\" : [{\r\n    \"panelId\" : \"final-panel\",\r\n    \"action\" : {\r\n      \"conditions\" : [],\r\n      \"default\" : {\r\n        \"action\" : \"SUBMIT\",\r\n      }\r\n    },\r\n    \"button\" : {\r\n      \"text\" : \"Submit\"\r\n    },\r\n    \"questionSets\" : [{\r\n      \"index\" : 1,\r\n      \"questionSetId\" : \"info-set\"\r\n    }]\r\n  }],\r\n  \"questionSets\" : [{\r\n    \"questionSetId\" : \"info-set\",\r\n    \"questions\" : [\r\n    {\r\n      \"questionId\" : \"classifier\",\r\n      \"question\" : \"ML Classifier\",\r\n      \"input\" : {\r\n        \"type\" : \"selectInput\",\r\n        \"options\" : [{\r\n          \"text\" : \"Random Forest\",\r\n          \"value\" : \"random_forest\",\r\n        }, {\r\n          \"text\" : \"XGBoost\",\r\n          \"value\" : \"xgboost\",\r\n        }, {\r\n          \"text\" : \"LightGBM\",\r\n          \"value\" : \"lgbm\",\r\n        }, {\r\n          \"text\" : \"KNN\",\r\n          \"value\" : \"knn\",\r\n        }, {\r\n          \"text\" : \"Dummy (random) classifier\",\r\n          \"value\" : \"dummy\",\r\n        }]\r\n      }\r\n    },\r\n\r\n    {\r\n      \"questionId\" : \"forecast_horizon\",\r\n      \"question\" : \"Forecast horizon\",\r\n      \"input\" : {\r\n        \"type\" : \"selectInput\",\r\n        \"options\" : [{\r\n          \"text\" : \"10 CUSUM downsampled Dollar Bars\",\r\n          \"value\" : \"fixed_horizon_10\",\r\n        }, {\r\n          \"text\" : \"25 CUSUM downsampled Dollar Bars\",\r\n          \"value\" : \"fixed_horizon_25\",\r\n        }, {\r\n          \"text\" : \"50 CUSUM downsampled Dollar Bars\",\r\n          \"value\" : \"fixed_horizon_50\",\r\n        }, {\r\n          \"text\" : \"100 CUSUM downsampled Dollar Bars\",\r\n          \"value\" : \"fixed_horizon_100\",\r\n        }]\r\n      }\r\n    },\r\n  ]\r\n  }]\r\n};"],"sourceRoot":""}